{"ast":null,"code":"const express = require(\"express\");\nconst router = express.Router();\nconst db = require(\"../config/db\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\n// Ensure the uploads directory exists\nconst ensureUploadsDirectory = () => {\n  const dir = path.join(__dirname, \"../uploads/categories\");\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, {\n      recursive: true\n    });\n  }\n};\nensureUploadsDirectory();\n\n// Configure Multer\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, path.join(__dirname, \"../uploads/categories\"));\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = [\"image/jpeg\", \"image/png\"];\n  if (allowedTypes.includes(file.mimetype)) {\n    cb(null, true);\n  } else {\n    cb(new Error(\"Invalid file type. Only JPEG and PNG are allowed.\"));\n  }\n};\nconst upload = multer({\n  storage,\n  fileFilter\n});\n\n// Get all categories\nrouter.get(\"/\", (req, res) => {\n  const query = \"SELECT id, category_name AS name, category_photo FROM business_categories\";\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    res.status(200).json(results);\n  });\n});\n\n// Upload category photo\nrouter.post(\"/:categoryId/upload-photo\", upload.single(\"categoryPhoto\"), (req, res) => {\n  if (!req.file) {\n    return res.status(400).json({\n      message: \"No file uploaded\"\n    });\n  }\n  const categoryId = req.params.categoryId;\n  const categoryPhotoUrl = `/uploads/categories/${req.file.filename}`;\n  const query = \"UPDATE business_categories SET category_photo = ? WHERE id = ?\";\n  db.query(query, [categoryPhotoUrl, categoryId], (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: \"Category photo uploaded successfully\",\n      categoryPhoto: categoryPhotoUrl\n    });\n  });\n});\n\n// Get users by category\nrouter.get(\"/:categoryId/users\", (req, res) => {\n  const categoryId = req.params.categoryId;\n  const query = `\n    SELECT id, businessname, address, email, profile_photo \n    FROM business_users \n    WHERE category_id = ?`;\n  db.query(query, [categoryId], (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    const users = results.map(user => ({\n      ...user,\n      profilePhoto: user.profile_photo ? `${req.protocol}://${req.get(\"host\")}/uploads/${user.profile_photo}` : null\n    }));\n    res.status(200).json(users);\n  });\n});\n\n// Get photos by user\nrouter.get(\"/users/:userId/photos\", (req, res) => {\n  const userId = req.params.userId;\n  const query = `\n    SELECT photo_url \n    FROM business_photos \n    WHERE user_id = ?`;\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    const photos = results.map(photo => ({\n      photoUrl: `${req.protocol}://${req.get(\"host\")}/uploads/${photo.photo_url}`\n    }));\n    res.status(200).json(photos);\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","multer","path","fs","ensureUploadsDirectory","dir","join","__dirname","existsSync","mkdirSync","recursive","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","fileFilter","allowedTypes","includes","mimetype","Error","upload","get","res","query","err","results","console","error","status","json","message","post","single","categoryId","params","categoryPhotoUrl","categoryPhoto","users","map","user","profilePhoto","profile_photo","protocol","userId","photos","photo","photoUrl","photo_url","module","exports"],"sources":["C:/Users/Admin/Downloads/React_Node_Sql_Path2-main/React_Node_Sql_Path2-main/fe/src/pages/Categories.js"],"sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst db = require(\"../config/db\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\n// Ensure the uploads directory exists\nconst ensureUploadsDirectory = () => {\n  const dir = path.join(__dirname, \"../uploads/categories\");\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n};\n\nensureUploadsDirectory();\n\n// Configure Multer\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, path.join(__dirname, \"../uploads/categories\"));\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  },\n});\n\nconst fileFilter = (req, file, cb) => {\n  const allowedTypes = [\"image/jpeg\", \"image/png\"];\n  if (allowedTypes.includes(file.mimetype)) {\n    cb(null, true);\n  } else {\n    cb(new Error(\"Invalid file type. Only JPEG and PNG are allowed.\"));\n  }\n};\n\nconst upload = multer({\n  storage,\n  fileFilter,\n});\n\n// Get all categories\nrouter.get(\"/\", (req, res) => {\n  const query =\n    \"SELECT id, category_name AS name, category_photo FROM business_categories\";\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({ message: \"Database error\", error: err });\n    }\n    res.status(200).json(results);\n  });\n});\n\n// Upload category photo\nrouter.post(\n  \"/:categoryId/upload-photo\",\n  upload.single(\"categoryPhoto\"),\n  (req, res) => {\n    if (!req.file) {\n      return res.status(400).json({ message: \"No file uploaded\" });\n    }\n\n    const categoryId = req.params.categoryId;\n    const categoryPhotoUrl = `/uploads/categories/${req.file.filename}`;\n\n    const query =\n      \"UPDATE business_categories SET category_photo = ? WHERE id = ?\";\n\n    db.query(query, [categoryPhotoUrl, categoryId], (err, results) => {\n      if (err) {\n        console.error(\"Database error:\", err);\n        return res.status(500).json({ message: \"Database error\", error: err });\n      }\n\n      res.status(200).json({\n        message: \"Category photo uploaded successfully\",\n        categoryPhoto: categoryPhotoUrl,\n      });\n    });\n  }\n);\n\n// Get users by category\nrouter.get(\"/:categoryId/users\", (req, res) => {\n  const categoryId = req.params.categoryId;\n  const query = `\n    SELECT id, businessname, address, email, profile_photo \n    FROM business_users \n    WHERE category_id = ?`;\n\n  db.query(query, [categoryId], (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({ message: \"Database error\", error: err });\n    }\n\n    const users = results.map((user) => ({\n      ...user,\n      profilePhoto: user.profile_photo\n        ? `${req.protocol}://${req.get(\"host\")}/uploads/${user.profile_photo}`\n        : null,\n    }));\n\n    res.status(200).json(users);\n  });\n});\n\n// Get photos by user\nrouter.get(\"/users/:userId/photos\", (req, res) => {\n  const userId = req.params.userId;\n  const query = `\n    SELECT photo_url \n    FROM business_photos \n    WHERE user_id = ?`;\n\n  db.query(query, [userId], (err, results) => {\n    if (err) {\n      console.error(\"Database error:\", err);\n      return res.status(500).json({ message: \"Database error\", error: err });\n    }\n\n    const photos = results.map((photo) => ({\n      photoUrl: `${req.protocol}://${req.get(\"host\")}/uploads/${photo.photo_url}`,\n    }));\n\n    res.status(200).json(photos);\n  });\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}