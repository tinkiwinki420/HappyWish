{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst db = require(\"../config/db\"); // Adjust the path to your db module\nconst router = express.Router();\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"uploads/\");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024,\n    // Set file size limit to 10MB\n    fieldSize: 10 * 1024 * 1024 // Set field size limit to 10MB\n  }\n});\n// Ensure the uploads directory exists\nconst fs = require(\"fs\");\nconst uploadDir = path.join(__dirname, \"../uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\n// Route to add an exclusive meal\nrouter.post('/exclusive', upload.single('image'), (req, res) => {\n  console.log('File uploaded for exclusive meal:', req.file); // Debugging line\n  const {\n    name,\n    description,\n    price\n  } = req.body;\n  const image = req.file ? req.file.filename : null;\n  if (!name || !description || !price || !image) {\n    return res.status(400).json({\n      message: 'All fields are required'\n    });\n  }\n  const query = `INSERT INTO exclusive_meals (name, description, image, price) VALUES (?, ?, ?, ?)`;\n  db.query(query, [name, description, image, price], (err, results) => {\n    if (err) {\n      console.error('Error inserting exclusive meal:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Exclusive meal added successfully'\n    });\n  });\n});\n\n// Route to update exclusive meal details (without image)\nrouter.put('/exclusive/:id/details', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    description,\n    price\n  } = req.body;\n  const query = `UPDATE exclusive_meals SET name = ?, description = ?, price = ? WHERE id = ?`;\n  db.query(query, [name, description, price, id], (err, results) => {\n    if (err) {\n      console.error('Error updating exclusive meal details:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Exclusive meal details updated successfully'\n    });\n  });\n});\n\n// Route to update exclusive meal photo only\nrouter.put('/exclusive/:id/photo', upload.single('image'), (req, res) => {\n  const {\n    id\n  } = req.params;\n  const image = req.file ? req.file.filename : null;\n  if (!image) {\n    return res.status(400).json({\n      message: 'Image file is required'\n    });\n  }\n  const query = `UPDATE exclusive_meals SET image = ? WHERE id = ?`;\n  db.query(query, [image, id], (err, results) => {\n    if (err) {\n      console.error('Error updating exclusive meal photo:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Exclusive meal photo updated successfully'\n    });\n  });\n});\n\n// Route to delete an exclusive meal\nrouter.delete('/exclusive/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const query = `DELETE FROM exclusive_meals WHERE id = ?`;\n  db.query(query, [id], (err, results) => {\n    if (err) {\n      console.error('Error deleting exclusive meal:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Exclusive meal deleted successfully'\n    });\n  });\n});\n\n// Route to add a regular meal\nrouter.post('/regular', upload.single('image'), (req, res) => {\n  const {\n    name,\n    description,\n    price\n  } = req.body;\n  const image = req.file ? req.file.filename : null;\n  if (!name || !description || !price || !image) {\n    return res.status(400).json({\n      message: 'All fields are required'\n    });\n  }\n  const query = `INSERT INTO regular_meals (name, description, image, price) VALUES (?, ?, ?, ?)`;\n  db.query(query, [name, description, image, price], (err, results) => {\n    if (err) {\n      console.error('Error inserting regular meal:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Regular meal added successfully'\n    });\n  });\n});\n\n// Route to update regular meal details (without image)\nrouter.put('/regular/:id/details', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    description,\n    price\n  } = req.body;\n  const query = `UPDATE regular_meals SET name = ?, description = ?, price = ? WHERE id = ?`;\n  db.query(query, [name, description, price, id], (err, results) => {\n    if (err) {\n      console.error('Error updating regular meal details:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Regular meal details updated successfully'\n    });\n  });\n});\n\n// Route to update regular meal photo only\nrouter.put('/regular/:id/photo', upload.single('image'), (req, res) => {\n  const {\n    id\n  } = req.params;\n  const image = req.file ? req.file.filename : null;\n  if (!image) {\n    return res.status(400).json({\n      message: 'Image file is required'\n    });\n  }\n  const query = `UPDATE regular_meals SET image = ? WHERE id = ?`;\n  db.query(query, [image, id], (err, results) => {\n    if (err) {\n      console.error('Error updating regular meal photo:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Regular meal photo updated successfully'\n    });\n  });\n});\n\n// Route to delete a regular meal\nrouter.delete('/regular/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const query = `DELETE FROM regular_meals WHERE id = ?`;\n  db.query(query, [id], (err, results) => {\n    if (err) {\n      console.error('Error deleting regular meal:', err);\n      return res.status(500).json({\n        message: 'Database error',\n        error: err\n      });\n    }\n    res.status(200).json({\n      message: 'Regular meal deleted successfully'\n    });\n  });\n});\n\n// Route to get all regular meals\nrouter.get(\"/regular\", (req, res) => {\n  const query = `SELECT * FROM regular_meals`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching regular meals:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    res.status(200).json(results);\n  });\n});\n\n// Route to get all exclusive meals\nrouter.get(\"/exclusive\", (req, res) => {\n  const query = `SELECT * FROM exclusive_meals`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching exclusive meals:\", err);\n      return res.status(500).json({\n        message: \"Database error\",\n        error: err\n      });\n    }\n    res.status(200).json(results);\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","path","db","router","Router","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","limits","fileSize","fieldSize","fs","uploadDir","join","__dirname","existsSync","mkdirSync","post","single","res","console","log","name","description","price","body","image","status","json","message","query","err","results","error","put","id","params","delete","get","module","exports"],"sources":["C:/Users/Admin/Downloads/React_Node_Sql_Path2-main/React_Node_Sql_Path2-main/fe/src/pages/Services.js"],"sourcesContent":["const express = require(\"express\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst db = require(\"../config/db\"); // Adjust the path to your db module\nconst router = express.Router();\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"uploads/\");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + path.extname(file.originalname));\n  },\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // Set file size limit to 10MB\n    fieldSize: 10 * 1024 * 1024, // Set field size limit to 10MB\n  },\n});\n// Ensure the uploads directory exists\nconst fs = require(\"fs\");\nconst uploadDir = path.join(__dirname, \"../uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\n// Route to add an exclusive meal\nrouter.post('/exclusive', upload.single('image'), (req, res) => {\n  console.log('File uploaded for exclusive meal:', req.file); // Debugging line\n  const { name, description, price } = req.body;\n  const image = req.file ? req.file.filename : null;\n\n  if (!name || !description || !price || !image) {\n    return res.status(400).json({ message: 'All fields are required' });\n  }\n\n  const query = `INSERT INTO exclusive_meals (name, description, image, price) VALUES (?, ?, ?, ?)`;\n  db.query(query, [name, description, image, price], (err, results) => {\n    if (err) {\n      console.error('Error inserting exclusive meal:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Exclusive meal added successfully' });\n  });\n});\n\n// Route to update exclusive meal details (without image)\nrouter.put('/exclusive/:id/details', (req, res) => {\n  const { id } = req.params;\n  const { name, description, price } = req.body;\n\n  const query = `UPDATE exclusive_meals SET name = ?, description = ?, price = ? WHERE id = ?`;\n  db.query(query, [name, description, price, id], (err, results) => {\n    if (err) {\n      console.error('Error updating exclusive meal details:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Exclusive meal details updated successfully' });\n  });\n});\n\n// Route to update exclusive meal photo only\nrouter.put('/exclusive/:id/photo', upload.single('image'), (req, res) => {\n  const { id } = req.params;\n  const image = req.file ? req.file.filename : null;\n\n  if (!image) {\n    return res.status(400).json({ message: 'Image file is required' });\n  }\n\n  const query = `UPDATE exclusive_meals SET image = ? WHERE id = ?`;\n  db.query(query, [image, id], (err, results) => {\n    if (err) {\n      console.error('Error updating exclusive meal photo:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Exclusive meal photo updated successfully' });\n  });\n});\n\n// Route to delete an exclusive meal\nrouter.delete('/exclusive/:id', (req, res) => {\n  const { id } = req.params;\n\n  const query = `DELETE FROM exclusive_meals WHERE id = ?`;\n  db.query(query, [id], (err, results) => {\n    if (err) {\n      console.error('Error deleting exclusive meal:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Exclusive meal deleted successfully' });\n  });\n});\n\n// Route to add a regular meal\nrouter.post('/regular', upload.single('image'), (req, res) => {\n  const { name, description, price } = req.body;\n  const image = req.file ? req.file.filename : null;\n\n  if (!name || !description || !price || !image) {\n    return res.status(400).json({ message: 'All fields are required' });\n  }\n\n  const query = `INSERT INTO regular_meals (name, description, image, price) VALUES (?, ?, ?, ?)`;\n  db.query(query, [name, description, image, price], (err, results) => {\n    if (err) {\n      console.error('Error inserting regular meal:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Regular meal added successfully' });\n  });\n});\n\n// Route to update regular meal details (without image)\nrouter.put('/regular/:id/details', (req, res) => {\n  const { id } = req.params;\n  const { name, description, price } = req.body;\n\n  const query = `UPDATE regular_meals SET name = ?, description = ?, price = ? WHERE id = ?`;\n  db.query(query, [name, description, price, id], (err, results) => {\n    if (err) {\n      console.error('Error updating regular meal details:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Regular meal details updated successfully' });\n  });\n});\n\n// Route to update regular meal photo only\nrouter.put('/regular/:id/photo', upload.single('image'), (req, res) => {\n  const { id } = req.params;\n  const image = req.file ? req.file.filename : null;\n\n  if (!image) {\n    return res.status(400).json({ message: 'Image file is required' });\n  }\n\n  const query = `UPDATE regular_meals SET image = ? WHERE id = ?`;\n  db.query(query, [image, id], (err, results) => {\n    if (err) {\n      console.error('Error updating regular meal photo:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Regular meal photo updated successfully' });\n  });\n});\n\n// Route to delete a regular meal\nrouter.delete('/regular/:id', (req, res) => {\n  const { id } = req.params;\n\n  const query = `DELETE FROM regular_meals WHERE id = ?`;\n  db.query(query, [id], (err, results) => {\n    if (err) {\n      console.error('Error deleting regular meal:', err);\n      return res.status(500).json({ message: 'Database error', error: err });\n    }\n    res.status(200).json({ message: 'Regular meal deleted successfully' });\n  });\n});\n\n// Route to get all regular meals\nrouter.get(\"/regular\", (req, res) => {\n  const query = `SELECT * FROM regular_meals`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching regular meals:\", err);\n      return res.status(500).json({ message: \"Database error\", error: err });\n    }\n    res.status(200).json(results);\n  });\n});\n\n// Route to get all exclusive meals\nrouter.get(\"/exclusive\", (req, res) => {\n  const query = `SELECT * FROM exclusive_meals`;\n  db.query(query, (err, results) => {\n    if (err) {\n      console.error(\"Error fetching exclusive meals:\", err);\n      return res.status(500).json({ message: \"Database error\", error: err });\n    }\n    res.status(200).json(results);\n  });\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}